.container {
    padding: 5px;
    border: 3px solid #aaa;
    display: flex;
    flex-wrap: nowrap;
    align-items: flex-start;
  }
  /* 
  flex-direction-меняем направление главной оси:

  row-(по умолчанию)-направление эл-ов слева направо;
  column-направление сверху вниз;
  row-reverse-направление справа налево;
  column-reverse-направление снизу вверх
  */

  /* 
  flex-wrap-управляет переносом не помещающихся эл-ов в контейнер:

  nowrap-(по умолчанию)-вложенные эл-ты располагаются в 1 ряд и в одну колонну
    независимо от того, помещаются они в контейнер или нет;
  wrap-включает перенос эл-ов на следующий ряд, если они не помещаются в контейнер.
    так вклюсается движение по поперечной оси;
  wrap-reverse-включает перенос эл-ов в обратном направлении.
  */

  /* 
  justify-content-выравнивание вдоль главной оси:

  flex-start-по умолчанию-блоки прижаты к началу главной оси;
  flex-end-блоки прижаты к концу главной оси;
  center-блоки располагаются в центре главной оси;
  space-between- первый блок располагается в начале главной оси, последний блок в конце,
    все остальные блоки равномерно распределены в оставшемся пространстве;
  space-around-все блоки равномерно распределены вдоль главной оси, 
    разделяя все свободное пространство поровну.
  */

  /* 
  align-items-выравнивание эл-ов по направлению поперечной оси:

  flex-start-блоки прижаты к началу поперечной оси;
  flex-end-блоки прижаты к концу поперечной оси;
  center-блоки располагаются в центре поперечной оси;
  baseline-блоки выровнены по их baseline;
  stretch-значение по умолчанию-блоки растянуты, занимая все доступное место по
  поперечной оси

  align-self-предназначено для выравнивания отдельно взятого flex-блока по поперечной осиь
    Пооэтому, в отличие от align-items, оно применяется не к flex-контейнеру, а к flex-элементу.
  */

  /* 
  order-используется для измения порядка следования flex-элетментов во flex-котейнере
    По умолчанию его значение -0.
  */

  /* 
  flex-basic-устанавливает базовую ширину элемента-ширину до того, как будут высчитаны остальные 
    условия, влияющие на ширину элемента.
    Итоговая ширина будет зависеть от базовой ширины и значений flex-grow, flex-shrink, а 
    также контента внутри блока.
    Значение по умолчанию-auto.
  */

  /* 
  flex-grow-задает коэффициент увеличения эл-та при наличии свободного места в контейнере.
    По умолчанию flex-grow:0.
    Принимает не обсолютное, а относительное значение-т.е. не само значение flex-grow, а
    какое оно по отношению к другим блокам.
  */

  /* 
  flex-shrink-задает коэффициент уменьшения элемента. Это свойство противоположно flex-grow.
    По умолчанию flex-shrink:1 
  */
  .el {
    background: lightblue;
    font-size: 20px;
    text-align: center;
    margin: 5px;
    height: 100px;
    width: 100px;
    line-height: 100px;
    flex-basis: 300px;
  }
  
  .n1 {
    flex-shrink: 3;
  }

