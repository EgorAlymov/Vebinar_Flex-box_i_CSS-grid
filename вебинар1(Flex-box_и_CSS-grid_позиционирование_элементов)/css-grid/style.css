* {
  font-family: 'Roboto', sans-serif;
}

.grid-container {
  height: 300px;
  padding: 20px;
  border: 1px dashed grey;
  display: grid;
 grid-template-columns: repeat(4, 150px);
  grid-template-rows: 100px 100px;
  column-gap: 10px;
  row-gap: 15px;
  align-content: end;
  justify-content: center;
}

.grid-item {
  background: lightyellow;
  border: 2px solid black;
  font-size: 23px;
  padding: 20px;
  text-align: center;
}

/* 
Что такое Grid?
CSS Grid Layout - самая мощная система компоновки из доступных на данный момент в CSS. Это двумерная система,
 которая может обрабатывать как колонки так и строки, в отличие от Flexbox, который в значительной степени является одномерной системой. 
При работе с CSS Grid, CSS правила применяются как к родительским элементам (которые становятся Grid контейнерами), 
так и к дочерним элементам (которые становятся Grid элементами).
*/

/* 
Основы Grid
Grid  —  это набор горизонтальных и вертикальных «линий», которые пересекаются между собой и создают сетку из рядов и колонок.
Элементы могут быть помещены в сетку, опираясь на номер линии или номер ряда/колонки.
Grid-контейнер — элемент, который содержит Grid-сетку.
Grid-элементы — элементы, размещаемые по сетке. Ими станут непосредственные потомки grid-контейнера.
Линии — это образные линии, разделяющие сетку на колонки и ряды, они создают структуру сетки. Линии автоматически нумеруются. 
Ряды/колонки — все что находится между соседними линиями, т.е. линии разделяют сетку на ряды и колонки.
Ячейка — место куда будет расположен элемент. Ячейка это пересечение колонки и ряда.
Разрыв — расстояние между рядами и колонками. Разрывает линию на две. По умолчанию линия между ячейками всего одна (ячейки слеплены),
но если указать разрыв, то мы разорвем линию, и появится расстояние между колонками/рядами, при этом номер или имя линии (колонки/ряда) остается одно.
Для включения CSS Grid любому HTML элементу достаточно присвоить CSS свойство display: grid или display: inline-grid. После этого внутри контейнера
создается grid-сетка, а все вложенные элементы первого уровня станут ячейками сетки.
*/

/* 
grid-template
grid-template-rows указывает, из скольких рядов состоит сетка и какие у них размеры
grid-template-columns указывает, из скольких колонок состоит сетка и какие у них размеры

Задать размеры можно с помощью:
auto - размер ряда или колонки подстраивается под размер элемента так, чтобы поместился самый большой из них.
px, em, %, vh, vw — размер абсолютный (px), относительный (em, vw, vh) или в % от ширины/высоты контейнера.
fr — специальная единица измерения в grid. Свободное место в контейнере делится на фракции.
Так, если одной колонке указать 1fr, а другой 2fr, то вторая будет больше первой в 2 раза

У двух этих свойств есть сокращенные записи:
grid-template: grid-template-rows / grid-template-columns
grid: grid-template-rows / grid-template-columns
Если при задании рядов/колонок встречаются повторяющиеся элементы, запись можно сократить с использованием repeat()
*/

/* 
grid-gap
В CSS Grid мы можем также управлять размерами разрывов между рядами и колонками. По умолчанию размер разрыва равен 0.
Для этого используются следующие свойства:
grid-row-gap - задает разрыв между рядами.
grid-column-gap - задает разрыв между колонками.
grid-gap - задает разрыв для рядов и колонок разом. Это сокращение для двух предыдущих свойств. Если указать один параметр, он будет выставлен для обоих значений.
Размер разрыва может быть задан как в абсолютных значениях (px), так и в относительных (%, em).
*/

/* 
Выравнивание элементов сетки
Ячейкам сетки можно задать выравнивание по вертикали и по горизонтали. Для этого используются свойства:
align-content выравнивает ряды по вертикали
justify-content выравнивает колонки по горизонтали
place-content сокращенная запись предыдущих свойств: установит оба значения 
place-content: align-content justify-content;
*/

/* 
Выравнивание элементов сетки
Возможные значения свойств align-content/justify-content:
stretch (по умолчанию) — растягивает ряды/колонки (ячейки) полностью. Все пространство контейнера заполняется. 
start — ряды/колонки расположены вплотную друг к другу к начальному краю контейнера.
end — ряды/колонки расположены вплотную друг к другу к конечному краю контейнера.
center — ряды/колонки расположены вплотную друг к другу и находятся посередине контейнера.
space-around — свободное пространство равномерно распределяется между рядами/колонками и добавляется по краям. 
space-evenly — тоже что и space-around, только расстояние до краев контейнера такое же как и между рядами/колонками.
space-between — крайние ряд/колонка прижимаются к краям контейнера и свободное место равномерно распределяется между рядами/колонками.
Чтобы выровнять не сами ячейки, а элементы внутри ячеек, нужно использовать justify-items, align-items, и place-items с теми же значениями.
*/

/* 
Сравнение Flexbox и Grid
1)Работают в разных измерениях
CSS Grid и CSS Flexbox имеют свои особенности и нельзя сказать, что одно заменяет другое. Flexbox может являться отличным дополнением к Grid, и наоборот.
Одно из важных отличий - Flexbox ориентирован на одномерные макеты, а Grid - на двумерные.
В отличие от Flexbox, который ориентирован на одну ось, Grid оптимизирован для двумерных компоновок: когда требуется расположить (выровнять) содержимое
в обоих измерениях (по вертикали и горизонтали).
2)Flexbox фокусируется на распределении пространства внутри одной оси, использует более простой подход к компоновке, может использовать систему упаковки
строк на основе размера содержимого для управления своей вторичной осью и полагается на иерархию HTML разметки.
Grid позволяет явного позиционировать элементы в сетке и выполнять кардинальные преобразования в структуре, не требуя никаких изменений HTML разметки. 
Таким образом, Grid больше подходит для создания каркасов, потому что имеет более мощный и комплексный подход и в целом не зависит от иерархии разметки.
Flexbox же больше подходит для одномерных элементов, когда блоки должны быть выстроены в одну линию. 
Эти два подхода можно (и нужно ) совмещать - например, использовать Grid для создания общей структуры страницы, 
а для отдельно взятых элементов использовать Flexbox, который в этом случае будет более простым и мощным инструментом.
*/



